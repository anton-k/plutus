(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
      )
    )
    (let
      (nonrec)
      (datatypebind
        (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
      )
      (let
        (rec)
        (termbind
          (strict)
          (vardecl go (fun [List (con char)] (con string)))
          (lam
            ds
            [List (con char)]
            [
              [
                [
                  { [ { Nil_match (con char) } ds ] (fun Unit (con string)) }
                  (lam thunk Unit (con string ""))
                ]
                (lam
                  x
                  (con char)
                  (lam
                    xs
                    [List (con char)]
                    (lam
                      thunk
                      Unit
                      [
                        [ (builtin append) [ (builtin charToString) x ] ]
                        [ go xs ]
                      ]
                    )
                  )
                )
              ]
              Unit
            ]
          )
        )
        (let
          (nonrec)
          (termbind
            (nonstrict)
            (vardecl stringToBuiltinString (fun [List (con char)] (con string)))
            go
          )
          (lam
            ds
            [List (con char)]
            [ (builtin encodeUtf8) [ stringToBuiltinString ds ] ]
          )
        )
      )
    )
  )
)